import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
n = 100          # —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è (n x n)
steps = 70       # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
p_seed = 0.15  # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–∞—Ä–æ–∂–¥–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è 
grid = np.random.choice([0, 1], size=(n, n), p=[1 - p_seed, p_seed])

#  –ü—Ä–∞–≤–∏–ª–æ —Ä–æ—Å—Ç–∞ 
def update(frame):
    global grid
    new_grid = grid.copy()

    for i in range(n):
        for j in range(n):
            if grid[i, j] == 0:
                # —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 1
                neighbors = grid[max(i - 1, 0):min(i + 2, n),
                                 max(j - 1, 0):min(j + 2, n)]
                total = np.sum(neighbors) - grid[i, j]
                # –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–æ: —Ä–æ—Å—Ç –ø—Ä–∏ 4‚Äì9 —Å–æ—Å–µ–¥—è—Ö
                if total in [4, 6, 7, 8, 9]:
                    new_grid[i, j] = 1

    grid = new_grid
    im.set_array(grid)

    # –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º t
    ax.set_title(f"–†–æ—Å—Ç –∫–ª–∞—Å—Ç–µ—Ä–∞ (–∫–ª–µ—Ç–æ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç)\n–®–∞–≥ t = {frame + 1} / {steps}",
                 fontsize=12, pad=10)
    return [im]

#  –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 
fig, ax = plt.subplots()
im = ax.imshow(grid, cmap='Greens', vmin=0, vmax=1)
ax.axis('off')

# üîπ –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–≤—Ç–æ—Ä
ani = FuncAnimation(fig, update, frames=steps, interval=300, blit=False, repeat=False)

plt.show()
